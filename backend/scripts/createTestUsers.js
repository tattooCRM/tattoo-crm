require('dotenv').config();
const mongoose = require('mongoose');
const User = require('../models/User');
const bcrypt = require('bcryptjs');

async function createTestUsers() {
  try {
    await mongoose.connect(process.env.MONGO_URI);
    console.log('‚úÖ Connexion MongoDB r√©ussie');

    // V√©rifier si les utilisateurs existent d√©j√†
    const existingArtist = await User.findOne({ email: 'test@tatoueur.com' });
    const existingClient = await User.findOne({ email: 'john@example.com' });

    // Cr√©er l'artiste tatoueur si n√©cessaire
    if (!existingArtist) {
      const hashedPassword = await bcrypt.hash('password', 10);
      const artist = new User({
        email: 'test@tatoueur.com',
        password: hashedPassword,
        firstName: 'Test',
        lastName: 'Tatoueur',
        role: 'tattoo_artist',
        isVerified: true
      });
      await artist.save();
      console.log('‚úÖ Utilisateur tatoueur cr√©√©');
    } else {
      console.log('‚úÖ Utilisateur tatoueur existant trouv√©');
    }

    // Cr√©er le client si n√©cessaire
    if (!existingClient) {
      const hashedPassword = await bcrypt.hash('password', 10);
      const client = new User({
        email: 'john@example.com',
        password: hashedPassword,
        firstName: 'John',
        lastName: 'Doe',
        role: 'client',
        isVerified: true
      });
      await client.save();
      console.log('‚úÖ Utilisateur client cr√©√©');
    } else {
      console.log('‚úÖ Utilisateur client existant trouv√©');
    }

    console.log('\nüéâ Utilisateurs de test pr√™ts !');
    
  } catch (error) {
    console.error('‚ùå Erreur:', error);
  } finally {
    await mongoose.disconnect();
  }
}

createTestUsers();
