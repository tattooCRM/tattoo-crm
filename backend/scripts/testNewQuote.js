const axios = require('axios');

// Script pour cr√©er et envoyer un nouveau devis
async function testNewQuote() {
  try {
    console.log('üîê Connexion...');
    
    // Se connecter en tant que Cl√©ment
    const loginResponse = await axios.post('http://localhost:5000/api/auth/login', {
      email: 'clemvanker@gmail.com',
      password: 'root'
    });
    
    const token = loginResponse.data.token;
    console.log('‚úÖ Connexion r√©ussie');
    
    // R√©cup√©rer les conversations pour trouver clientId et conversationId
    const conversationsResponse = await axios.get('http://localhost:5000/api/chat/conversations', {
      headers: { Authorization: `Bearer ${token}` }
    });
    
    const conversations = conversationsResponse.data.conversations;
    if (conversations.length === 0) {
      console.log('‚ùå Aucune conversation trouv√©e');
      return;
    }
    
    const conversation = conversations[0];
    const clientParticipant = conversation.participants.find(p => p.role === 'client');
    
    if (!clientParticipant) {
      console.log('‚ùå Aucun client trouv√© dans la conversation');
      return;
    }
    
    console.log('üìû Conversation:', conversation._id);
    console.log('üë§ Client:', clientParticipant.userId.name);
    
    // Cr√©er un nouveau devis
    const quoteData = {
      conversationId: conversation._id,
      clientId: clientParticipant.userId._id,
      title: 'Test Devis Format HTML',
      items: [
        {
          description: 'Tatouage de test avec nouveau format',
          quantity: 1,
          unitPrice: 250
        }
      ],
      notes: 'Devis de test pour v√©rifier le nouveau format HTML styl√©',
      validUntil: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // 30 jours
      taxRate: 0
    };
    
    console.log('\nüìã Cr√©ation du devis...');
    const createResponse = await axios.post('http://localhost:5000/api/quotes', quoteData, {
      headers: { Authorization: `Bearer ${token}` }
    });
    
    const newQuote = createResponse.data.quote;
    console.log('‚úÖ Devis cr√©√©:', newQuote.quoteNumber);
    console.log('üí∞ Montant:', newQuote.totalAmount, '‚Ç¨');
    
    // Envoyer le devis
    console.log('\nüì§ Envoi du devis...');
    const sendResponse = await axios.post(`http://localhost:5000/api/quotes/${newQuote._id}/send`, {}, {
      headers: { Authorization: `Bearer ${token}` }
    });
    
    console.log('‚úÖ Devis envoy√© !');
    
    // V√©rifier le message dans la conversation
    setTimeout(async () => {
      try {
        const messagesResponse = await axios.get(`http://localhost:5000/api/chat/conversations/${conversation._id}/messages`, {
          headers: { Authorization: `Bearer ${token}` }
        });
        
        const messages = messagesResponse.data.messages || [];
        console.log(`\nüí¨ ${messages.length} messages dans la conversation`);
        
        // Chercher le dernier message de devis cr√©√© (pas le premier dans la liste)
        const quoteMessages = messages.filter(msg => msg.type === 'quote');
        const latestMessage = quoteMessages.find(msg => 
          msg.content.includes(newQuote.quoteNumber) || 
          msg.metadata?.quoteId === newQuote._id
        ) || messages[0];
        if (latestMessage) {
          console.log('\nüìù Dernier message:');
          console.log('Type:', latestMessage.type);
          console.log('Date:', new Date(latestMessage.createdAt).toLocaleString('fr-FR'));
          console.log('MessageType:', latestMessage.metadata?.messageType || 'undefined');
          
          // Afficher un aper√ßu du contenu (premiers 200 caract√®res)
          console.log('\nContenu (aper√ßu):');
          console.log('---');
          console.log(latestMessage.content.substring(0, 200) + '...');
          console.log('---');
          
          // V√©rifier le format du message
          if (latestMessage.metadata?.messageType === 'html_quote' && latestMessage.content.includes('<div style')) {
            console.log('\nüéâ SUCCESS! Le nouveau format HTML fonctionne !');
            console.log('‚úÖ Message de type html_quote d√©tect√©');
            console.log('‚úÖ Contenu HTML avec styles d√©tect√©');
            
            // V√©rifier la pr√©sence des boutons
            if (latestMessage.content.includes('onclick="handleQuoteAction')) {
              console.log('‚úÖ Boutons interactifs d√©tect√©s');
            } else {
              console.log('‚ö†Ô∏è Boutons interactifs manquants');
            }
            
            // V√©rifier la pr√©sence du gradient
            if (latestMessage.content.includes('linear-gradient')) {
              console.log('‚úÖ Styles de gradient d√©tect√©s');
            }
            
            // V√©rifier la pr√©sence des informations du devis
            if (latestMessage.content.includes(newQuote.quoteNumber)) {
              console.log('‚úÖ Num√©ro de devis pr√©sent dans le HTML');
            }
            
          } else if (latestMessage.content.includes('üìã **Nouveau Devis')) {
            console.log('\n‚ö†Ô∏è ATTENTION: Ancien format texte d√©tect√© - devrait √™tre HTML !');
            console.log('‚ùå Le format HTML n\'est pas appliqu√© correctement');
          } else {
            console.log('\n‚ùå Format de message non reconnu');
            console.log('Type de message:', latestMessage.metadata?.messageType);
            console.log('Contient HTML:', latestMessage.content.includes('<div'));
          }
          
          console.log('\nüìä R√©sum√© du test:');
          console.log('- Devis cr√©√©:', newQuote.quoteNumber);
          console.log('- Message envoy√©:', latestMessage.type);
          console.log('- Format message:', latestMessage.metadata?.messageType || 'undefined');
          console.log('- Contient HTML:', latestMessage.content.includes('<div') ? 'OUI' : 'NON');
          console.log('- Contient boutons:', latestMessage.content.includes('onclick') ? 'OUI' : 'NON');
        }
        
      } catch (error) {
        console.error('‚ùå Erreur v√©rification:', error.response?.data || error.message);
      }
    }, 2000);
    
  } catch (error) {
    console.error('‚ùå Erreur:', error.response?.data || error.message);
  }
}

testNewQuote();
