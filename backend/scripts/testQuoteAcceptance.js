require('dotenv').config();
const mongoose = require('mongoose');
const Chat = require('../models/Chat');
const Quote = require('../models/Quote');
const Project = require('../models/Project');
const ClientProfile = require('../models/ClientProfile');

async function testQuoteAcceptance() {
  try {
    // Connexion √† MongoDB
    await mongoose.connect(process.env.MONGO_URI);
    console.log('‚úÖ Connexion MongoDB r√©ussie');

    // Trouver le dernier devis cr√©√©
    const latestQuote = await Quote.findOne().sort({ createdAt: -1 });
    if (!latestQuote) {
      console.log('‚ùå Aucun devis trouv√©');
      return;
    }

    console.log(`üìã Devis trouv√©: ${latestQuote.quoteNumber} (${latestQuote.status})`);

    if (latestQuote.status !== 'sent') {
      console.log(`‚ö†Ô∏è  Devis non envoy√© ou d√©j√† trait√© (status: ${latestQuote.status})`);
      return;
    }

    // Simuler l'acceptation du devis
    latestQuote.status = 'accepted';
    latestQuote.acceptedAt = new Date();
    await latestQuote.save();
    console.log('‚úÖ Devis accept√©');

    // G√©n√©rer un num√©ro de projet unique
    const projectNumber = `PROJ-${Date.now().toString().slice(-8).toUpperCase()}`;

    // Cr√©er le projet avec tous les champs requis
    const project = new Project({
      projectNumber: projectNumber,
      title: `Projet Tatouage - ${latestQuote.quoteNumber}`,
      description: `Projet cr√©√© automatiquement suite √† l'acceptation du devis ${latestQuote.quoteNumber}`,
      tattooArtistId: latestQuote.tattooArtistId,
      clientId: latestQuote.clientId,
      quoteId: latestQuote._id,
      conversationId: latestQuote.conversationId,
      style: 'japanese', // Style par d√©faut bas√© sur le test
      bodyZone: 'arm', // Zone par d√©faut bas√©e sur le test
      size: 'large', // Taille par d√©faut
      estimatedDuration: 6, // 6 heures bas√© sur le devis test
      status: 'pending', // Status valide
      totalAmount: latestQuote.subtotal
    });
    
    await project.save();
    console.log(`‚úÖ Projet cr√©√©: ${project._id}`);

    // Cr√©er ou mettre √† jour le profil client
    let clientProfile = await ClientProfile.findOne({ email: latestQuote.clientEmail });
    
    if (!clientProfile) {
      clientProfile = new ClientProfile({
        email: latestQuote.clientEmail,
        nom: 'Client',
        prenom: 'Test',
        telephone: '+33 6 12 34 56 78',
        notes: `Client cr√©√© automatiquement suite √† l'acceptation du devis ${latestQuote.quoteNumber}`,
        tattooArtistId: latestQuote.tattooArtistId,
        projets: [project._id]
      });
    } else {
      clientProfile.projets.push(project._id);
    }
    
    await clientProfile.save();
    console.log(`‚úÖ Fiche client ${clientProfile ? 'mise √† jour' : 'cr√©√©e'}: ${clientProfile._id}`);

    // Ajouter un message de confirmation dans la conversation
    const conversation = await Chat.findById(latestQuote.conversationId);
    if (conversation) {
      const confirmationMessage = {
        sender: 'system',
        message: `‚úÖ Devis ${latestQuote.quoteNumber} accept√© ! 
        
üéâ F√©licitations ! Votre projet de tatouage est maintenant confirm√©.
üìã Num√©ro de projet: ${project._id.toString().slice(-8).toUpperCase()}
üí∞ Budget: ${latestQuote.subtotal} EUR

Nous allons vous contacter prochainement pour organiser les d√©tails de votre tatouage.`,
        messageType: 'text',
        timestamp: new Date()
      };

      conversation.messages.push(confirmationMessage);
      await conversation.save();
      console.log('‚úÖ Message de confirmation ajout√© √† la conversation');
    }

    console.log('\nüéâ Test d\'acceptation de devis termin√© avec succ√®s !');
    console.log(`üìã Devis: ${latestQuote.quoteNumber}`);
    console.log(`üìÅ Projet: ${project.title}`);
    console.log(`üë§ Client: ${clientProfile.email}`);

  } catch (error) {
    console.error('‚ùå Erreur:', error);
  } finally {
    await mongoose.disconnect();
  }
}

testQuoteAcceptance();
