const Event = require('../models/Agenda');

// R√©cup√©rer les √©v√©nements d'un utilisateur
exports.getEventsByUser = async (req, res) => {
  try {
    const { userId } = req.params;
    console.log(`üìÖ R√©cup√©ration des √©v√©nements pour l'utilisateur: ${userId}`);
    
    const events = await Event.find({ userId });
    console.log(`‚úÖ ${events.length} √©v√©nements trouv√©s pour l'utilisateur ${userId}`);
    
    res.json(events);
  } catch (error) {
    console.error('‚ùå Erreur lors de la r√©cup√©ration des √©v√©nements:', error);
    res.status(500).json({ message: 'Erreur serveur', error: error.message });
  }
};require('../models/Agenda');
const mongoose = require('mongoose');

// R√©cup√©rer tous les √©v√©nements d'un utilisateur
exports.getEventsByUser = async (req, res) => {
  try {
    const { userId } = req.params;
    const events = await Event.find({ userId });
    res.json(events);
  } catch (error) {
    console.error('Erreur lors de la r√©cup√©ration des √©v√©nements:', error);
    res.status(500).json({ message: 'Erreur serveur', error: error.message });
  }
};

// Ajouter un √©v√©nement
exports.createEvent = async (req, res) => {
  try {
    const { userId, title, description, date, time } = req.body;

    console.log('Donn√©es re√ßues:', req.body);

    if (!userId || !title || !date || !time) {
      return res.status(400).json({ 
        message: "Champs manquants", 
        received: { userId, title, date, time } 
      });
    }

    const newEvent = new Event({ userId, title, description, date, time });
    const savedEvent = await newEvent.save();
    
    console.log('√âv√©nement cr√©√© avec succ√®s:', savedEvent);
    res.status(201).json(savedEvent);
  } catch (error) {
    console.error('Erreur lors de la cr√©ation de l\'√©v√©nement:', error);
    res.status(500).json({ message: 'Erreur serveur', error: error.message });
  }
};

// Modifier un √©v√©nement
exports.updateEvent = async (req, res) => {
  try {
    const { id } = req.params;
    const updateData = req.body;

    console.log(`üìù Requ√™te de mise √† jour pour l'√©v√©nement ${id}:`, updateData);

    const updatedEvent = await Event.findByIdAndUpdate(id, updateData, { new: true });

    if (!updatedEvent) {
      console.log(`‚ùå √âv√©nement ${id} non trouv√©`);
      return res.status(404).json({ message: "√âv√©nement non trouv√©" });
    }

    console.log(`‚úÖ √âv√©nement ${id} mis √† jour avec succ√®s:`, {
      title: updatedEvent.title,
      date: updatedEvent.date,
      time: updatedEvent.time
    });

    res.json(updatedEvent);
  } catch (error) {
    console.error('‚ùå Erreur lors de la mise √† jour de l\'√©v√©nement:', error);
    res.status(500).json({ message: 'Erreur serveur', error: error.message });
  }
};

// Supprimer un √©v√©nement
exports.deleteEvent = async (req, res) => {
  try {
    const { id } = req.params;

    const deletedEvent = await Event.findByIdAndDelete(id);
    if (!deletedEvent) return res.status(404).json({ message: "√âv√©nement non trouv√©" });

    res.json({ message: "√âv√©nement supprim√©" });
  } catch (error) {
    console.error('Erreur lors de la suppression de l\'√©v√©nement:', error);
    res.status(500).json({ message: 'Erreur serveur', error: error.message });
  }
};
